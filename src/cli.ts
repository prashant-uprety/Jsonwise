import fs from 'fs';
import { Command } from 'commander';

/**
 * Represents a field in a model.
 */
interface ModelField {
  name: string; // The name of the field
  type: string; // The type of the field
}

/**
 * Represents a model with fields.
 */
interface Model {
  name: string; // The name of the model
  fields: ModelField[]; // The fields in the model
}

/**
 * Generates TypeScript interface and JSON files for each model in the schema.
 * @param schema - The schema containing models.
 * @param config - The configuration object.
 */
function generateModelFiles(schema: { models: Model[] }, config: { outputDir: string }): void {
  if (!fs.existsSync(config.outputDir)) {
    fs.mkdirSync(config.outputDir, { recursive: true });
  }

  schema.models.forEach((model) => {
    let interfaceContent = `/* ðŸš€ This file is generated by jsonwise. Make sure to blast off carefully when making manual changes!*/\n\n`;
    interfaceContent += `export interface ${model.name} {\n`;
    model.fields.forEach((field) => {
      interfaceContent += `  ${field.name}: ${field.type};\n`;
    });
    interfaceContent += '}\n';

    const jsonContent = JSON.stringify(model, null, 2);

    fs.writeFileSync(`${config.outputDir}/${model.name}.ts`, interfaceContent);
    fs.writeFileSync(`${config.outputDir}/${model.name}.json`, jsonContent);
  });
}

// Create a new command for the CLI
const program = new Command();

// Define the version and description of the CLI
program.version('0.0.1').description('jsonwise CLI');

// Define the 'generate' command for the CLI
program
  .command('generate')
  .description('Generate model files')
  .requiredOption('-s, --schemaFile <schemaFile>', 'Path to schema file')
  .option('-o, --outputDir [outputDir]', 'Output directory', 'jsonwise')
  .option('-c, --config [config]', 'Path to config file')
  .action(async (cmd) => {
    const schemaFile = cmd.schemaFile;
    const outputDir = cmd.outputDir || 'jsonwise';

    let config: { outputDir?: string } = {};
    if (cmd.config) {
      const configJson = fs.readFileSync(cmd.config, 'utf-8');
      config = JSON.parse(configJson);
    }

    try {
      const schemaJson = fs.readFileSync(schemaFile, 'utf-8');
      const schema = JSON.parse(schemaJson);
      generateModelFiles(schema, { outputDir });

      console.log('Model files generated successfully!');
    } catch (err) {
      console.error('Error:', err);
    }
  });

// Parse the command-line arguments
program.parse(process.argv);
